const behaviouralQuestions = {
    "Give me an example of a time you had a conflict with a team member. How did you handle it?": "Example At LabCorp Inc., my team was responsible for completing a project with a short deadline. I decided it would be best to delegate individual tasks to each team member, but one person disagreed and thought it would be better to meet to work on it together for a few days each week. I decided to schedule a lunch meeting with this team member to understand his idea better and why he disagreed. After this meeting, we compromised by completing the smaller tasks individually and working on the larger ones as a group. Our team was able to complete the task before the deadline. I also gained a better understanding of my team members and their work preferences and learned that compromise can sometimes be the best way to resolve a conflict quickly.",
    "Tell me about a time you made a mistake at work. How did you resolve the problem, and what did you learn from your mistake?": "Example: I had just started working as a member of the wait staff at Coppa's Restaurant when a customer at one of my tables ordered a salad. She said she wanted her peanuts removed because she's allergic to them, but I neglected to inform the kitchen staff. When I brought the dish out, she thankfully noticed the problem before she started eating. She was upset about the peanuts, and as the waiter, I recognized that I made a mistake when I failed to inform the kitchen of her allergy. I promptly apologized and offered her a coupon rather than charging her for the meal, which she gratefully accepted. From this experience, I learned the importance of listening to customers and avoided making the same mistake.",
    "Describe an occasion when you had to manage your time to complete a task. How did you do it?": "Broad Idea Magazine released a special edition every quarter, and I was on the writing team last year. My editor needed three 2,000-word stories from me for the quarter's upcoming special edition in January. Due to various production delays, I had only two weeks to write them, so I scheduled as much time as possible to research, write and edit each story. I set routine reminders for myself and carefully planned out each day before the deadline. By managing my time, I was able to complete the stories three days ahead of schedule.",
    "Describe an occasion when you failed at a task. What did you learn from it?": "At Bright Star Shipping, my team had the opportunity to bid for a multi-million dollar contract. Our responsibility was to complete a sales presentation. We had a week to prepare for it, but I spent too much time on other projects, which caused me to rush my portion of the presentation and submit it with typos and spelling mistakes. I also forgot to include several important facts in the slides, and my team didn't win the contract. After that experience, I learned how important it is to prioritize my projects. Each week, I write my tasks in a planner and choose to work on more complex projects when I know I am the most productive. As a result, I slowly improved my time management skills so I could have more time to create an appealing and persuasive presentation for our next bid.",
    "Tell me about a time you took the initiative in your career. What was your motivation for doing so?": "Last summer, senior executives at H.B. Bank visited our regional office. In preparation, our management asked my team to compile a report that included spreadsheets and a slide presentation to show our performance over the previous 12 months. The week before, the team member we assigned the spreadsheet to became ill and could not complete it. Knowing how important it was, I volunteered to work on the spreadsheet on her behalf, and my completed work impressed the senior management, resulting in my supervisor publicly thanking me for my additional contributions.",
    "Describe a time when you used your leadership skills to motivate your team or colleagues. ": "My former employer, Yan, Inc., completed a merger two years ago that lowered morale for some teams. My department had new management that gave us new, unfamiliar responsibilities. I noticed a decrease in our overall productivity, so I led a weekly workshop where we learned new skills to help us become more productive and engaged in our roles. As a result of this professional development training, morale and overall engagement increased by 37% over the next six months.",
    "Describe a time when you were responsible for a task you didn't receive training on and were unsure how to complete. How did you handle it?": "I had been at PhiBeta Software as a Visual Basic developer for four years when the company decided to begin using Java instead. Most of my colleagues already had Java skills, but I only knew VB and COBOL. I wanted to continue working at PhiBeta Software, but the company was small and lacked the resources to offer training, so I enrolled in a Java class at my local community college and invested in some books to learn the basics of the language. Soon, I was able to help my team convert our existing code base to Java.",
    "Share an example of a career goal you had. What steps did you take to achieve it?": "When I graduated with a bachelor's degree in marketing, my two-year goal was to work at an advertising firm as a digital strategist. I didn't have much direct advertising experience, so I got an internship where I was responsible for advertising insurance products. I also earned a certification in digital advertising and completed online courses in my free time. Last year, I earned a position as an entry-level digital strategist at a firm in San Diego, where I trained with a senior brand designer.",
    "Give an example of a time when you had to make a difficult decision. How did you handle it?": "In my previous role as an assistant manager, I was responsible for promoting an employee on the sales team to the sales lead position. There were several highly qualified and self-motivated employees, which made the decision difficult. After reviewing sales data and performance assessments carefully, I made my decision. To reduce animosity and tension among the candidates, I met with each candidate individually after I made the decision to explain my thought process before formally announcing it to the entire team.",
    "Describe your process for solving problems. What steps do you take to resolve important issues at work?": "In my current role as a mechanical engineer, I resolve a variety of problems related to changing timelines, equipment malfunctions and workplace hazards. With any issue, I first determine the different factors involved before meeting with the relevant parties. Last month, for example, I noticed an issue with the blueprints for an air-conditioning system I was building. After documenting the issue, I met with the drafting team and shared my concerns, and they were able to provide me with updated blueprints."
}

const dbmsQuestions = {
    "What is a DBMS, and why is it important in software development?": "A DBMS, or Database Management System, is software that manages databases. It's crucial in software development because it allows for efficient storage, retrieval, and manipulation of data, ensuring data consistency, security, and data integrity.",
    "Explain the difference between a database and a DBMS.": "A database is a collection of organized data, while a DBMS is the software used to create, manage, and manipulate that data within the database. The DBMS provides features like data storage, retrieval, and security.",
    "What are the main types of DBMS models, and how do they differ?": "The main types of DBMS models are the relational model, hierarchical model, network model, and object-oriented model. They differ in how they structure and organize data, with the relational model being the most widely used, organizing data in tables.",
    "Explain the ACID properties in the context of DBMS.": "ACID stands for Atomicity, Consistency, Isolation, and Durability. These properties ensure the reliability of database transactions. Atomicity ensures that transactions are treated as a single unit. Consistency ensures data integrity. Isolation prevents transactions from interfering with each other. Durability ensures that committed transactions survive system failures.",
    "What is a primary key in a relational database, and why is it important?": "A primary key is a unique identifier for each record in a table. It's important because it enforces data integrity by ensuring that each record can be uniquely identified, and it's used for indexing and linking data across tables.",
    "Explain the concept of normalization in database design.": "Normalization is the process of organizing data in a database to reduce data redundancy and improve data integrity. It involves breaking data into smaller, related tables and creating relationships between them.",
    "What is a foreign key, and how is it used in a relational database?": "A foreign key is a field in a table that links to the primary key of another table. It's used to establish relationships between tables, ensuring referential integrity by preventing the insertion of invalid data.",
    "What is a SQL injection, and how can it be prevented?": "SQL injection is a security vulnerability where an attacker can manipulate SQL queries through user input. It can be prevented by using parameterized queries, input validation, and implementing security mechanisms like firewalls and WAFs.",
    "Explain the difference between a clustered and non-clustered index in a database.": "A clustered index determines the physical order of data rows in a table, and there can be only one per table. A non-clustered index is a separate data structure that provides a logical order of data rows and allows multiple indexes per table.",
    "What is a transaction in a DBMS, and what are its properties?": "A transaction is a sequence of one or more SQL statements executed as a single unit of work. The ACID properties (Atomicity, Consistency, Isolation, and Durability) ensure the reliability and integrity of transactions.",
    "Explain the concept of data warehousing and its importance.": "Data warehousing is the process of collecting, storing, and managing data from various sources to support business intelligence and reporting. It's important for providing a centralized repository of structured data for analysis and decision-making.",
    "What are the advantages and disadvantages of NoSQL databases?": "Advantages of NoSQL databases include flexibility, scalability, and high performance. Disadvantages include limited support for complex queries and a lack of ACID compliance, making them less suitable for certain use cases.",
    "Explain the CAP theorem and its implications on distributed databases.": "The CAP theorem states that in a distributed database, you can achieve at most two out of three properties: Consistency, Availability, and Partition tolerance. It implies that under network partitions, a distributed system must choose between consistency and availability.",
    "What is data replication in a distributed database, and why is it important?": "Data replication involves storing the same data in multiple locations. It's important for improving data availability, fault tolerance, and reducing data access latency in distributed systems.",
    "Explain the concept of database sharding and its benefits.": "Database sharding involves splitting a large database into smaller, more manageable pieces called shards. It improves scalability, performance, and load distribution in distributed databases.",
    "What is a stored procedure in a database, and how does it differ from a standard SQL query?": "A stored procedure is a precompiled set of one or more SQL statements that can be executed with a single command. It differs from a standard SQL query in that it can accept parameters, is reusable, and offers better performance.",
    "Explain the concept of database indexing and its purpose.": "Database indexing is a technique used to improve data retrieval performance by creating data structures that allow for efficient data lookup. Indexes speed up query processing by providing direct access to data.",
    "What are database triggers, and how are they used?": "Database triggers are special types of stored procedures that are automatically executed in response to specific events or actions in the database. They are used to enforce data integrity, perform auditing, and automate tasks.",
    "What is the difference between OLTP and OLAP databases, and when are they used?": "OLTP (Online Transaction Processing) databases are used for transactional operations and support high write and read volume. OLAP (Online Analytical Processing) databases are used for analytical queries and reporting, supporting complex data analysis."
}

const dataStructures = {
    "What is a data structure, and why is it important in programming?": "A data structure is a way of organizing and storing data. It's important in programming because it affects the efficiency and functionality of algorithms, making data manipulation and retrieval faster and more efficient.",
    "Explain the difference between an array and a linked list.": "An array is a data structure with a fixed size that stores elements of the same type contiguously in memory. A linked list is a data structure where elements (nodes) are connected through pointers, allowing dynamic sizing and efficient insertions and deletions.",
    "What are the time and space complexity of an algorithm, and why are they important?": "Time complexity measures the amount of time an algorithm takes to run, and space complexity measures the amount of memory it uses. They are important because they help in analyzing and comparing the efficiency of algorithms.",
    "What is Big O notation, and how is it used to describe algorithm efficiency?": "Big O notation is used to describe the upper bound on the time or space complexity of an algorithm in terms of the input size. It helps in understanding how an algorithm's performance scales with larger inputs.",
    "Explain the concept of recursion and provide an example of a recursive algorithm.": "Recursion is a programming technique where a function calls itself to solve a problem. An example is the factorial calculation: `factorial(n) = n * factorial(n-1)` with a base case of `factorial(0) = 1`.",
    "What is a binary search algorithm, and how does it work?": "A binary search is an efficient algorithm to find an element in a sorted array. It repeatedly divides the search interval in half, eliminating half of the remaining elements in each step.",
    "What is a hash table, and why is it used in data structures?": "A hash table is a data structure that stores key-value pairs and uses a hash function to map keys to specific locations in an array. It allows fast data retrieval and is commonly used for caching and indexing.",
    "Explain the difference between a stack and a queue.": "A stack is a data structure that follows the Last-In-First-Out (LIFO) principle, while a queue follows the First-In-First-Out (FIFO) principle. Stacks are used for tasks like function call management, and queues are used for tasks like scheduling and buffering.",
    "What is dynamic programming, and how is it different from divide and conquer?": "Dynamic programming is a technique to solve complex problems by breaking them into smaller subproblems and storing the results of each subproblem to avoid redundant calculations. It's different from divide and conquer because it reuses solutions to subproblems.",
    "Explain the concept of a binary tree and its types.": "A binary tree is a data structure where each node has at most two child nodes. Types include binary search trees (BST), AVL trees, and heap trees, each with specific properties and use cases.",
    "What is an algorithm for finding the shortest path in a graph?": "Dijkstra's algorithm and the Bellman-Ford algorithm are used to find the shortest path in a weighted graph. Dijkstra's algorithm is used for non-negative edge weights, while Bellman-Ford can handle negative weights.",
    "What are in-order, pre-order, and post-order traversals of a binary tree?": "In-order traversal visits left subtree, current node, and right subtree. Pre-order traversal visits current node, left subtree, and right subtree. Post-order traversal visits left subtree, right subtree, and then the current node.",
    "Explain the concept of a priority queue and its applications.": "A priority queue is a data structure where each element has an associated priority. It's used in algorithms like Dijkstra's for shortest path, Prim's for minimum spanning tree, and A* for pathfinding.",
    "What is the concept of dynamic array resizing, and why is it important in array-based data structures?": "Dynamic array resizing involves increasing the size of an array when it's full. It's important in data structures like ArrayList in Java to handle variable-sized collections efficiently.",
    "What are the different types of sorting algorithms, and when would you choose one over the other?": "Sorting algorithms include quicksort, mergesort, heapsort, and more. The choice depends on the size and characteristics of the input data and whether stability, in-place sorting, or average-case performance is a priority.",
    "Explain the concept of a linked list, and what are the advantages and disadvantages compared to arrays?": "A linked list is a data structure where elements are linked by pointers. Advantages include dynamic sizing and efficient insertions/deletions. Disadvantages include slower random access and higher memory overhead compared to arrays.",
    "What is memoization in dynamic programming, and how does it improve algorithm efficiency?": "Memoization involves storing the results of expensive function calls and returning the cached result when the same inputs occur again. It improves efficiency by avoiding redundant calculations.",
    "What are the basic operations of a stack data structure, and where is it used in real-world applications?": "Basic stack operations include push (add to the top) and pop (remove from the top). Stacks are used in real-world applications like function call management, undo functionality, and expression evaluation.",
    "Explain the concept of an algorithm for cycle detection in a graph.": "Algorithms like depth-first search (DFS) and Floyd-Warshall are used for cycle detection in a graph. DFS is used for directed graphs, and Floyd-Warshall is used for weighted graphs.",
    "What is the traveling salesman problem (TSP), and how is it solved?": "The TSP is an optimization problem to find the shortest possible route that visits a set of cities exactly once and returns to the starting city. It's solved using algorithms like dynamic programming, branch and bound, and heuristics like the nearest neighbor approach."
}

const cnQuestions = {
    "What is a computer network, and why is it important?": "A computer network is a collection of interconnected devices that can communicate and share resources. It's important because it enables data sharing, communication, and resource utilization, making it a fundamental part of modern computing.",
    "Explain the OSI model and its seven layers.": "The OSI (Open Systems Interconnection) model is a conceptual framework that standardizes network communications. Its seven layers, from lowest to highest, are Physical, Data Link, Network, Transport, Session, Presentation, and Application.",
    "What is the difference between a hub, a switch, and a router?": "A hub operates at the physical layer and broadcasts data to all connected devices. A switch operates at the data link layer and forwards data to the specific device based on MAC addresses. A router operates at the network layer and routes data between different networks based on IP addresses.",
    "Explain the concept of IP addressing and the difference between IPv4 and IPv6.": "IP addressing is the process of assigning unique addresses to devices on a network. IPv4 uses 32-bit addresses, while IPv6 uses 128-bit addresses. IPv6 was developed to address the exhaustion of IPv4 addresses and provides a larger address space.",
    "What is a subnet mask, and how does it relate to IP addressing?": "A subnet mask is used to divide an IP address into network and host portions. It helps in routing data within a network by identifying the network and host parts of the address.",
    "What is DNS (Domain Name System), and how does it work?": "DNS is a system that translates domain names into IP addresses. It works by maintaining a distributed database of domain names and their associated IP addresses, allowing users to access websites by name rather than IP address.",
    "Explain the difference between TCP and UDP, and when to use each protocol.": "TCP (Transmission Control Protocol) provides reliable, connection-oriented communication, ensuring data delivery and order. UDP (User Datagram Protocol) offers faster, connectionless communication but without reliability guarantees. Use TCP for applications requiring reliability, and UDP for real-time applications like video streaming.",
    "What is NAT (Network Address Translation), and why is it used in home routers?": "NAT is used to map multiple private IP addresses to a single public IP address. It's used in home routers to allow multiple devices to share a single public IP address, conserving the limited pool of public IPv4 addresses.",
    "Explain the concept of a firewall and its role in network security.": "A firewall is a network security device that filters incoming and outgoing network traffic based on an organization's previously established security policies. It helps protect a network from unauthorized access and threats.",
    "What is a VPN (Virtual Private Network), and how does it provide secure communication over the internet?": "A VPN creates an encrypted tunnel over a public network like the internet, ensuring secure and private communication. It's used to protect data and provide remote access to private networks.",
    "What is a MAC address, and how is it used in network communication?": "A MAC (Media Access Control) address is a unique hardware address assigned to network interfaces. It's used at the data link layer to identify devices on a local network and enable data frame delivery.",
    "Explain the concept of network latency and its impact on network performance.": "Network latency is the delay in data transmission between sender and receiver. It affects network performance by increasing the time it takes for data to travel, impacting real-time applications and user experience.",
    "What are the basic differences between a LAN (Local Area Network) and a WAN (Wide Area Network)?": "A LAN is a network that covers a small geographic area, like a home or office, while a WAN spans larger areas, often connecting multiple LANs or sites. WANs typically use public infrastructure and have higher latency compared to LANs.",
    "What is the purpose of ARP (Address Resolution Protocol), and how does it work?": "ARP is used to map an IP address to a MAC address on a local network. When a device needs to communicate with another on the same network, ARP resolves the IP address to the MAC address for data link layer delivery.",
    "Explain the concept of routing in a network and the role of routers.": "Routing is the process of determining the best path for data to travel from source to destination. Routers are network devices that make routing decisions based on destination IP addresses, ensuring data reaches the correct network segment.",
    "What is a packet and how is it used in network communication?": "A packet is a unit of data transmitted over a network. It contains both the data and control information necessary for delivery. Packets are used to efficiently transfer data in smaller, manageable chunks.",
    "What is the purpose of ICMP (Internet Control Message Protocol), and give an example of its use.": "ICMP is used for error reporting and diagnostics in network communication. An example is the 'ping' command, which sends ICMP echo request messages to check if a host is responsive.",
    "Explain the concept of QoS (Quality of Service) in network communication.": "QoS is a set of techniques used to manage network resources and ensure that critical traffic receives priority treatment. It's used to guarantee a certain level of performance for important applications.",
    "What is a proxy server, and how is it used for network security and content filtering?": "A proxy server acts as an intermediary between client and server requests. It's used for security by hiding the client's IP address and for content filtering by controlling access to specific websites or resources.",
    "What are the differences between HTTP and HTTPS, and why is HTTPS important for secure web communication?": "HTTP is an unsecured protocol, while HTTPS uses encryption (SSL/TLS) for secure web communication. HTTPS is important to protect sensitive data and ensure secure transactions over the internet."
}


const osQuestions = {
    "What is an operating system, and what are its primary functions?": "An operating system is system software that manages hardware and provides services for applications. Its primary functions include process management, memory management, file system management, device management, and user interface.",
    "Explain the difference between a process and a thread.": "A process is an independent program with its own memory space, while a thread is a smaller unit of a process, sharing the same memory space. Threads within a process can communicate and cooperate more easily than processes.",
    "What is the role of a scheduler in an operating system, and what are the types of scheduling algorithms?": "A scheduler is responsible for selecting the next process/thread to run on the CPU. Types of scheduling algorithms include First-Come, First-Served (FCFS), Shortest Job Next (SJN), Round Robin, and Priority Scheduling.",
    "What is virtual memory, and why is it used in operating systems?": "Virtual memory is a memory management technique that allows processes to use more memory than physically available by utilizing disk space as an extension. It provides better memory utilization and process isolation.",
    "Explain the concepts of multitasking, multithreading, and multiprocessing.": "Multitasking allows multiple tasks to run concurrently on a single CPU, while multithreading enables multiple threads in a single process to run concurrently. Multiprocessing involves multiple CPUs running processes or threads in parallel.",
    "What is a file system, and how does it manage data on storage devices?": "A file system organizes and manages data on storage devices, defining how data is stored, retrieved, and organized. It provides a hierarchical structure, file attributes, and access control mechanisms.",
    "Explain the difference between a kernel and a shell in an operating system.": "The kernel is the core of the operating system, responsible for managing hardware resources and providing essential services. A shell is an interface between the user and the kernel, allowing users to interact with the system through commands.",
    "What is a deadlock in operating systems, and how can it be prevented or resolved?": "A deadlock is a situation where two or more processes are unable to proceed because each is waiting for the other to release a resource. Deadlocks can be prevented or resolved using techniques like resource allocation graphs or timeouts.",
    "What is a page fault, and how does virtual memory handle it?": "A page fault occurs when a process tries to access a page that is not currently in physical memory. Virtual memory systems handle page faults by swapping pages in and out of physical memory, ensuring that the required page is available for access.",
    "Explain the role of an I/O scheduler and its importance in disk management.": "An I/O scheduler is responsible for managing the order in which I/O requests are serviced to optimize disk performance. It helps reduce seek times and improve overall I/O efficiency.",
    "What is process synchronization, and why is it important in multi-threaded environments?": "Process synchronization is the coordination of processes or threads to ensure they do not interfere with each other's execution. It's important to prevent issues like race conditions, data corruption, and deadlock in multi-threaded environments.",
    "What are the key components of a process control block (PCB)?": "A process control block contains information about a process, including process state, program counter, registers, scheduling information, and memory management information.",
    "Explain the concept of virtualization and its benefits in the context of operating systems.": "Virtualization allows running multiple instances of an operating system on a single physical machine. It provides isolation, resource utilization, and flexibility, making it useful for server consolidation and testing environments.",
    "What is a system call, and how does it enable user programs to interact with the kernel?": "A system call is an interface provided by the operating system for user programs to request services like I/O, process control, and file management. It enables user programs to interact with the kernel in a controlled manner.",
    "What is the role of the file allocation table (FAT) in file systems, and where is it commonly used?": "FAT is a file system structure that stores information about the location of files on storage devices. It is commonly used in older Microsoft Windows file systems like FAT12, FAT16, and FAT32.",
    "Explain the concept of segmentation and paging in memory management.": "Segmentation divides memory into logical segments, each with its own protection and permissions. Paging breaks memory into fixed-size pages, enabling efficient memory management and avoiding fragmentation.",
    "What is the purpose of a bootloader in the boot process of an operating system?": "A bootloader is responsible for loading the operating system into memory during the boot process. It performs hardware initialization, loads the OS kernel, and transfers control to the kernel's entry point.",
    "What is the difference between a process and a program?": "A program is a set of instructions stored in a file, while a process is an instance of a program in execution. Multiple processes can run the same program concurrently.",
    "Explain the concept of demand paging and its role in virtual memory management.": "Demand paging is a technique in which pages are loaded into memory only when they are needed. It minimizes initial memory usage and optimizes page loading based on actual demand."
}

const hrQuestions = {
    "Tell me about yourself.": "I have a strong background in [your field] with [X] years of experience. I'm passionate about [mention your passion], and I've had the opportunity to work on projects like [specific project], which showcased my skills in [key skills].",
    "Why do you want to work for our company?": "I'm drawn to your company's strong reputation for [mention a specific quality or achievement of the company], and I'm excited about the opportunity to contribute my skills and expertise to a team that values [mention company values].",
    "What is your greatest professional achievement?": "My greatest achievement was [specific achievement], where I [briefly describe the challenge, your role, and the outcome]. It highlighted my ability to [mention a relevant skill] and added substantial value to my previous employer.",
    "How do you handle high-pressure situations?": "In high-pressure situations, I stay calm and focused by [mention a stress management technique]. I prioritize tasks, communicate effectively, and rely on my experience to make well-informed decisions under pressure.",
    "What are your strengths and weaknesses?": "One of my strengths is [mention a strength like 'strong problem-solving skills']. As for weaknesses, I'm continually working on [mention an area you're actively improving, like 'public speaking'], and I've made significant progress by [briefly describe how you're addressing this weakness].",
    "How do you handle conflicts in the workplace?": "I approach conflicts by first understanding both sides of the issue. Then, I initiate a constructive dialogue and aim for a win-win resolution. I believe in open communication and compromise to maintain a positive work environment.",
    "Where do you see yourself in five years?": "In five years, I envision myself in a [mention your desired role] role, where I can contribute to the company's growth and success. I plan to continually develop my skills and take on more responsibilities.",
    "Why did you leave your previous job?": "I left my previous job to seek new opportunities for professional growth and to align with my long-term career goals. I had a positive experience at my previous company but felt that I had learned all I could in that role.",
    "What is your preferred work style, and how do you adapt to different team dynamics?": "My preferred work style is collaborative, and I value open communication and teamwork. However, I adapt to different team dynamics by being flexible and understanding of individual working styles. I believe in finding common ground for effective collaboration.",
    "What motivates you in your work?": "I'm motivated by [mention what motivates you, like 'solving complex problems' or 'making a positive impact on the company']. It drives my passion and fuels my commitment to achieving results and continuous improvement.",
    "How do you prioritize tasks and manage your time effectively?": "I prioritize tasks by assessing urgency and importance. I use time management techniques like the Eisenhower Matrix and time-blocking to ensure that I allocate sufficient time to critical tasks while staying organized and efficient.",
    "Tell me about a time you had to adapt to a significant change at work.": "I experienced a significant change when [briefly describe the situation, e.g., 'our company adopted a new project management software']. I adapted by [mention how you adapted, e.g., 'attending training, proactively helping colleagues, and embracing the change']. It improved our team's efficiency and project outcomes.",
    "What do you know about our company culture, and how do you see yourself fitting in?": "I understand that your company values [mention a company culture aspect, e.g., 'innovation and collaboration']. I believe my [mention a relevant skill or value, e.g., 'innovative thinking and teamwork'] aligns well with your culture, and I look forward to contributing positively to your team.",
    "How do you stay current with industry trends and best practices?": "I stay current by regularly reading industry publications, attending conferences, and participating in online forums. I also value continuous learning and often take courses or certifications to expand my knowledge and skills.",
    "What do you enjoy doing outside of work, and how does it help you in your professional life?": "Outside of work, I [mention a hobby or interest, e.g., 'enjoy hiking and photography']. It helps me maintain a healthy work-life balance, recharge, and develop creativity and problem-solving skills that I apply in my professional life.",
    "How would you handle a situation where you disagree with your supervisor or manager?": "If I disagree with my supervisor, I would respectfully express my concerns and provide well-reasoned arguments. I believe in open communication and finding common ground to make the best decisions for the team and the organization.",
    "What is your preferred communication style, and how do you ensure effective communication within a team?": "I prefer open and transparent communication. To ensure effective team communication, I schedule regular meetings, encourage feedback, and create a safe space for team members to share ideas and concerns.",
    "Can you provide an example of a time you went above and beyond your job responsibilities to achieve a positive outcome?": "Certainly. In a recent project, I volunteered to [briefly describe your proactive action, e.g., 'mentor a junior team member'], which was beyond my role. This contributed to [mention the positive outcome, e.g., 'a successful project completion'] and showcased my commitment to the team's success.",
    "What does diversity and inclusion mean to you, and how do you promote it in the workplace?": "Diversity and inclusion mean creating a welcoming environment where everyone's perspectives and backgrounds are valued. I promote it by actively listening, encouraging diverse voices, and participating in initiatives that foster an inclusive workplace."
}

const oopsQuestions = {
    "What is Object-Oriented Programming (OOP) and why is it important?": "OOP is a programming paradigm that uses objects, which are instances of classes, to model real-world entities and their interactions. It's important for code reusability, modularity, and maintaining large and complex software systems.",
    "Explain the four fundamental principles of OOP.": "The four fundamental principles of OOP are encapsulation, inheritance, abstraction, and polymorphism. Encapsulation hides the internal details of an object. Inheritance allows one class to inherit the properties and behaviors of another. Abstraction simplifies complex systems by focusing on relevant details. Polymorphism enables objects of different classes to be treated as objects of a common superclass.",
    "What is a class in OOP, and how does it relate to objects?": "A class is a blueprint or template for creating objects. It defines the properties and behaviors an object will have. Objects are instances of classes, created based on the class definition.",
    "Explain the concept of inheritance and its benefits in OOP.": "Inheritance allows a new class (subclass or derived class) to inherit properties and behaviors from an existing class (superclass or base class). It promotes code reusability, structure, and extensibility.",
    "What is encapsulation, and why is it important in OOP?": "Encapsulation is the concept of bundling data (attributes) and methods (functions) that operate on the data into a single unit called an object. It's important for data protection and abstraction, preventing unauthorized access to object internals.",
    "Describe the concept of polymorphism and its use in OOP.": "Polymorphism allows objects of different classes to be treated as objects of a common superclass. It simplifies code, enhances flexibility, and enables method overloading and overriding.",
    "What is an abstract class in OOP, and how does it differ from an interface?": "An abstract class is a class that cannot be instantiated and may have abstract (unimplemented) methods. An interface is a contract that defines a set of methods a class must implement. While an abstract class can have implemented methods, an interface cannot.",
    "Explain the difference between method overloading and method overriding.": "Method overloading involves defining multiple methods in the same class with the same name but different parameters. Method overriding occurs when a subclass provides a specific implementation for a method that is already defined in its superclass, thus replacing the original implementation.",
    "What is the 'super' keyword in OOP, and how is it used?": "The 'super' keyword is used to refer to the superclass of a subclass. It can be used to call a superclass's constructor or access its methods or properties.",
    "What is a constructor, and why is it essential in OOP?": "A constructor is a special method that is called when an object is created. It's used to initialize the object's properties. Constructors are essential for ensuring that an object is in a valid state when created.",
    "Explain the concept of aggregation and composition in OOP.": "Aggregation and composition are ways of creating relationships between objects. Aggregation represents a 'has-a' relationship, where one object contains or is part of another. Composition is a stronger 'whole-part' relationship, where one object cannot exist without the other.",
    "What is the purpose of the 'final' keyword in OOP, and how is it used?": "The 'final' keyword is used to indicate that a class, method, or variable is not meant to be modified or overridden. A 'final' class cannot be extended, a 'final' method cannot be overridden, and a 'final' variable cannot be reassigned.",
    "Explain the concept of static methods and variables in OOP.": "Static methods and variables belong to the class rather than an instance of the class. They are shared across all instances of the class and can be called without creating an object. Static methods are often used for utility functions and do not have access to instance-specific data.",
    "What is a design pattern in OOP, and why are they used?": "A design pattern is a reusable solution to a common problem in software design. They are used to promote best practices, improve code readability, and provide tested and proven solutions to recurring design challenges.",
    "Describe the Single Responsibility Principle (SRP) and its importance in OOP.": "The SRP states that a class should have only one reason to change, meaning it should have a single responsibility. This principle is important for code maintainability, as it makes classes more focused and easier to understand and modify.",
    "What is the Liskov Substitution Principle (LSP) and its impact on inheritance?": "The LSP states that objects of a subclass should be able to replace objects of the superclass without affecting program correctness. It ensures that inheritance hierarchies maintain consistency and expected behaviors.",
    "Explain the Dependency Inversion Principle (DIP) and its role in OOP.": "The DIP encourages high-level modules to depend on abstractions, not concrete implementations. It promotes flexibility, modularity, and easier adaptation to changes in dependencies.",
    "What is the Open-Closed Principle (OCP) and how does it relate to software extensibility?": "The OCP states that software entities (classes, modules, etc.) should be open for extension but closed for modification. It encourages the addition of new functionality through extension rather than changing existing code, enhancing software maintainability.",
    "What are the advantages of using OOP over procedural programming?": "OOP offers benefits like code reusability, encapsulation, modularity, and easier maintenance. It promotes a more organized and structured approach to software development."
}

const pythonQuestions = {
    "What is Python, and why is it a popular programming language?": "Python is a high-level, versatile, and dynamically typed programming language. It's popular due to its simplicity, readability, extensive standard library, and wide range of applications, from web development to data science.",
    "Explain the difference between Python 2 and Python 3.": "Python 3 is the latest version of Python and is not backward compatible with Python 2. Python 3 is considered the future and is recommended for new projects due to improvements, including better Unicode support and syntax enhancements.",
    "What is the Global Interpreter Lock (GIL), and how does it impact Python multithreading?": "The GIL is a mutex in the CPython implementation of Python that allows only one thread to execute in the interpreter at a time. It can impact Python multithreading by limiting the efficiency of CPU-bound multi-threaded applications.",
    "Explain Python's dynamic typing and how it differs from static typing.": "Python uses dynamic typing, which means that variable types are determined at runtime. This differs from static typing, where variable types are defined at compile time in languages like C++ or Java.",
    "What is a Python virtual environment, and why is it useful?": "A virtual environment is an isolated Python environment that allows you to manage dependencies and packages separately from the system Python installation. It's useful for avoiding conflicts and managing project-specific dependencies.",
    "How do you handle exceptions in Python, and what is the purpose of 'try', 'except', and 'finally' blocks?": "Exceptions are handled with 'try', 'except', and 'finally' blocks. 'try' encloses code that might raise an exception. 'except' defines what to do if an exception occurs. 'finally' is executed regardless of whether an exception occurred.",
    "Explain list comprehensions in Python and provide an example.": "List comprehensions are a concise way to create lists. For example, `[x**2 for x in range(10)]` creates a list of squared numbers from 0 to 9.",
    "What are Python decorators, and how are they used?": "Decorators are functions that modify other functions or methods. They are often used to add functionality to existing functions or to control access, authentication, or logging in Python.",
    "What is the purpose of the if __name__ == \'__main__\': in Python scripts?": "This construct is used to check whether the Python script is being run as the main program or if it is being imported as a module. It allows you to control the execution of code in the script.",
    "Explain the difference between 'deep copy' and 'shallow copy' in Python.": "A deep copy creates a new object with a new memory address, recursively copying all nested objects. A shallow copy creates a new object but does not copy nested objects; it references the same objects as the original.",
    "What are Python modules, and how do you import them?": "Modules are Python files containing functions, classes, and variables. They can be imported using the 'import' statement. For example, 'import math' imports the math module, allowing you to use its functions.",
    "Explain Python's support for object-oriented programming (OOP) and its key OOP concepts.": "Python supports OOP with classes, inheritance, encapsulation, and polymorphism. Classes define objects, inheritance allows classes to inherit properties, encapsulation hides object details, and polymorphism allows objects to take on multiple forms.",
    "What are lambda functions in Python, and when are they used?": "Lambda functions are anonymous functions used for short, simple operations. They are often used in places where a full function definition is not required, such as in sorting and filtering operations.",
    "How can you read and write files in Python, and what are the 'open' and 'with' statements used for?": "Files are read and written using the 'open' function. The 'with' statement is used to ensure that the file is properly closed when done, improving resource management.",
    "Explain the concept of a Python generator and how it differs from a list.": "A generator is a function that returns an iterator, which can be iterated over one item at a time. It differs from a list in that it generates values on-the-fly, making it more memory-efficient for large data sets.",
    "What is the purpose of a Python docstring, and how do you write one?": "A docstring is used to document code, classes, functions, or modules. It provides information about what the code does, its parameters, and usage. A docstring is enclosed in triple quotes, like '''Your documentation here''' or \"\"\"Your documentation here\"\"\".",
    "Explain Python's support for multi-threading and multi-processing, and when to use each.": "Python supports both multi-threading and multi-processing. Multi-threading is suitable for I/O-bound tasks, while multi-processing is better for CPU-bound tasks because of the GIL. Multi-processing creates separate processes with their own interpreter and memory space.",
    "What are list, set, and dictionary comprehensions in Python, and how do they differ?": "List comprehensions create lists, set comprehensions create sets, and dictionary comprehensions create dictionaries. They differ based on the type of object they generate, and the syntax for each is slightly different.",
    "Explain the Global, Local, and Nonlocal scope in Python.": "The Global scope refers to variables defined at the top level of a module and are accessible throughout the module. Local scope refers to variables defined within a function and are only accessible within that function. Nonlocal scope refers to variables in an enclosing function, used in nested functions.",
    "What is the Python Global Interpreter Lock (GIL), and how does it impact Python's performance in multi-threading?": "The GIL is a mutex that allows only one thread to execute in the Python interpreter at a time. This can impact Python's performance in multi-threading, especially for CPU-bound tasks, as it limits true parallel execution."
}

const cppQuestions = {
    "What is C++ and why is it a popular programming language?": "C++ is a versatile, statically typed, and general-purpose programming language. It's popular due to its ability to provide both high-level and low-level programming features, making it suitable for a wide range of applications.",
    "Explain the differences between C and C++ programming languages.": "C++ is an extension of C and includes additional features such as classes, objects, and inheritance. C is a procedural language, while C++ supports both procedural and object-oriented programming.",
    "What is Object-Oriented Programming (OOP), and how does C++ support OOP concepts?": "OOP is a programming paradigm that uses objects, classes, and inheritance to model real-world entities. C++ supports OOP through classes, objects, and features like encapsulation and polymorphism.",
    "What are the advantages of using pointers in C++?": "Pointers in C++ are used for dynamic memory allocation, creating data structures, and optimizing program performance. They provide direct access to memory locations and facilitate resource management.",
    "Explain the concept of 'function overloading' in C++ and provide an example.": "Function overloading is when multiple functions have the same name but different parameters. For example, you can have multiple 'calculate' functions that take different types of arguments, like 'calculate(int)' and 'calculate(double)'.",
    "What is the purpose of 'const' in C++, and how is it used?": "'const' is used to create constants, indicating that a variable's value cannot be modified after initialization. It is also used to define constant member functions that do not modify object state.",
    "What are the differences between 'new' and 'malloc' in C++ memory allocation?": "'new' is an operator in C++ used for dynamic memory allocation, and it calls the constructor of the allocated object. 'malloc' is a function in C that allocates memory without calling constructors and is often used in C++ when working with legacy code.",
    "Explain the concept of 'RAII' (Resource Acquisition Is Initialization) in C++ and its importance.": "RAII is a C++ programming technique where resource management is tied to the object's lifecycle. It ensures that resources, like memory or file handles, are automatically released when the object goes out of scope, reducing resource leaks.",
    "What is operator overloading in C++, and how is it implemented?": "Operator overloading allows you to redefine the behavior of operators for user-defined data types. It's implemented by defining operator member functions within a class, enabling custom behavior when operators are used with class objects.",
    "Explain the role of 'friend' functions in C++ classes.": "'Friend' functions can access private and protected members of a class even though they are not members of the class. They are often used when external functions need to access private class data while maintaining encapsulation.",
    "What is a virtual function in C++, and how does it relate to polymorphism?": "A virtual function is a member function that is declared as 'virtual' in a base class and can be overridden in derived classes. It relates to polymorphism by allowing dynamic binding of functions, enabling the correct function to be called at runtime based on the object's type.",
    "Explain the purpose of 'try', 'catch', and 'throw' in C++ exception handling.": "'Try' is used to enclose code that might throw an exception. 'Catch' is used to handle exceptions when they occur. 'Throw' is used to raise an exception explicitly when an error condition is detected.",
    "What is a smart pointer in C++, and why are they used?": "A smart pointer is an object that acts like a pointer but provides automatic memory management. It is used to ensure proper resource release, avoiding memory leaks, and simplifying memory management in C++.",
    "What are the differences between 'stack' and 'heap' memory allocation in C++?": "Stack memory is used for storing local variables and has a limited scope. It's automatically managed by the system. Heap memory is used for dynamic memory allocation and has a longer lifetime. Developers are responsible for managing heap memory.",
    "Explain the concept of 'multiple inheritance' in C++ and potential challenges it poses.": "Multiple inheritance allows a class to inherit properties and behaviors from multiple base classes. Challenges include ambiguity (e.g., two base classes defining the same method) and the diamond problem, which requires using virtual inheritance to resolve conflicts.",
    "What is a copy constructor in C++, and when is it called?": "A copy constructor is used to create a new object as a copy of an existing object. It is called when an object is passed by value, returned by value, or explicitly when creating a new object as a copy of an existing one.",
    "Explain the purpose of 'const_cast', 'dynamic_cast', 'static_cast', and 'reinterpret_cast' in C++ type casting.": "'const_cast' is used to remove the 'const' qualifier. 'dynamic_cast' is used for safe casting in polymorphic classes. 'static_cast' is used for type conversion between related types. 'reinterpret_cast' is used for low-level casting between unrelated types.",
    "What are the differences between 'call by value', 'call by reference', and 'call by pointer' in C++ function parameter passing?": "'Call by value' passes the value of the argument. 'Call by reference' passes a reference to the argument. 'Call by pointer' passes a pointer to the argument. The choice depends on the desired behavior and efficiency of parameter passing.",
    "Explain the purpose of 'namespace' in C++, and how does it help manage naming conflicts?": "'Namespace' is used to group related code elements and avoid naming conflicts. It provides a way to organize code, making it more modular and maintainable, especially in larger projects.",
    "What is the 'STL' (Standard Template Library) in C++, and how does it enhance C++ programming?": "The STL is a collection of template classes and functions that provide commonly used data structures and algorithms. It enhances C++ programming by offering pre-implemented, efficient, and reusable components, saving development time and effort."
}


const javaQuestions = {
    "What is Java, and why is it a popular programming language?": "Java is a high-level, versatile, and platform-independent programming language. It's popular due to its portability, extensive standard library, strong community support, and robust security features.",
    "Explain the differences between Java and JavaScript.": "Java is a general-purpose programming language used for developing applications, while JavaScript is a scripting language used for web development. They share similar syntax but serve different purposes.",
    "What is the Java Virtual Machine (JVM), and why is it important for Java programming?": "The JVM is an integral part of Java, responsible for executing Java byte code on different platforms. It ensures platform independence and allows Java programs to run on various operating systems.",
    "What is object-oriented programming (OOP), and how does Java support OOP principles?": "OOP is a programming paradigm that uses objects, classes, and inheritance. Java supports OOP through classes, objects, polymorphism, encapsulation, and inheritance.",
    "Explain the concept of a 'class' in Java and its role in object creation.": "A class is a blueprint for creating objects. It defines the structure and behavior of objects. In Java, objects are instances of classes, created based on the class definition.",
    "What are the main differences between 'public', 'private', 'protected', and 'default' access modifiers in Java?": "'Public' allows unrestricted access. 'Private' restricts access to the defining class. 'Protected' allows access within the same package and subclasses. 'Default' allows access within the same package.",
    "Explain the 'final' keyword in Java and its usage.": "'Final' is used to declare a variable, method, or class as unchangeable. A 'final' variable cannot be modified, a 'final' method cannot be overridden, and a 'final' class cannot be extended.",
    "What is a constructor in Java, and how does it differ from a regular method?": "A constructor is a special method used for object initialization. It is called when an object is created. Constructors have the same name as the class and do not return a value.",
    "What is method overloading in Java, and why is it used?": "Method overloading is when multiple methods in the same class have the same name but different parameters. It's used to provide different ways to perform a similar operation based on the method's arguments.",
    "Explain the concept of method overriding in Java and its relationship with inheritance.": "Method overriding is when a subclass provides a specific implementation for a method that is already defined in its superclass. It allows a subclass to provide its own behavior while maintaining the same method signature as the superclass.",
    "What is the purpose of the 'super' keyword in Java, and how is it used?": "'Super' is used to refer to the superclass, allowing access to superclass members, constructors, and methods. It is used to resolve ambiguity in overridden methods or to call a superclass constructor.",
    "What are Java packages, and how do they help in organizing code?": "Packages are used to group related classes and interfaces in Java. They help in organizing code, reducing naming conflicts, and improving code modularity and maintainability.",
    "Explain Java's exception handling mechanism, including 'try', 'catch', 'finally', and 'throw'.": "'Try' encloses code that might raise an exception. 'Catch' handles exceptions when they occur. 'Finally' is executed regardless of whether an exception occurred. 'Throw' is used to raise exceptions explicitly.",
    "What is 'Java memory management,' and how does it handle object allocation and garbage collection?": "Java memory management involves automatic memory allocation for objects and garbage collection for memory reclamation. It ensures efficient memory usage and eliminates memory leaks.",
    "What is the purpose of the 'static' keyword in Java, and how does it impact class members and methods?": "'Static' is used to declare class-level members and methods. It makes them belong to the class itself, not to instances of the class. Static members are shared among all instances of the class.",
    "What is 'Java inheritance,' and how does it enable code reusability?": "Inheritance allows a class (subclass or derived class) to inherit properties and behaviors from another class (superclass or base class). It promotes code reusability, structuring, and the extension of existing classes.",
    "Explain the 'this' keyword in Java and its use in different contexts.": "'This' is a reference to the current object. It is used to distinguish between instance variables and method parameters with the same name and to call constructors from other constructors within the same class.",
    "What is the 'java.lang' package, and why is it automatically imported in Java programs?": "The 'java.lang' package contains fundamental classes that are used by every Java program. It is automatically imported in Java programs for convenience, providing access to essential classes like 'String' and 'Object'.",
    "What is 'Java abstraction,' and how is it implemented using abstract classes and interfaces?": "Abstraction simplifies complex systems by focusing on relevant details. In Java, abstraction is implemented using abstract classes and interfaces. Abstract classes can have partially defined methods, while interfaces define a contract that classes must implement.",
    "What is 'Java multithreading,' and how does it enhance concurrent programming?": "Java multithreading allows multiple threads to execute concurrently within the same program. It enhances concurrent programming by enabling the execution of multiple tasks in parallel, improving system performance."
}

const jsQuestions = {
    "What is JavaScript, and how is it used in web development?": "JavaScript is a versatile, high-level, and dynamic scripting language used for adding interactivity and behavior to web pages. It enhances user experience and enables client-side scripting.",
    "Explain the differences between JavaScript and Java.": "JavaScript is a client-side scripting language primarily used for web development. Java is a separate, server-side programming language. They share similar syntax but serve different purposes.",
    "What is the Document Object Model (DOM) in JavaScript, and how does it relate to web pages?": "The DOM is a programming interface for HTML and XML documents. It represents the structure of web pages as objects, allowing JavaScript to access and manipulate web page content dynamically.",
    "How does JavaScript handle asynchronous programming, and what are callbacks, promises, and async/await?": "JavaScript handles asynchronous programming through callbacks, promises, and async/await. Callbacks are functions that execute after an asynchronous operation is complete. Promises provide a structured way to work with asynchronous code. Async/await simplifies asynchronous code by using 'async' functions and 'await' keywords.",
    "What is the difference between 'null' and 'undefined' in JavaScript?": "'Null' represents the intentional absence of any object value. 'Undefined' represents an uninitialized variable or an object property that does not exist.",
    "Explain the 'hoisting' concept in JavaScript and how it affects variable and function declarations.": "Hoisting is the process of moving variable and function declarations to the top of their containing scope during compilation. Variables are hoisted but initialized as 'undefined', while functions are hoisted along with their entire definition.",
    "What are closures in JavaScript, and why are they important?": "Closures are functions that have access to variables from their outer (enclosing) function's scope. They are important for data encapsulation, private variables, and maintaining state in JavaScript applications.",
    "What is 'event delegation' in JavaScript, and how does it improve performance and code structure?": "Event delegation is a technique where you attach a single event listener to a common ancestor element, allowing you to handle events for multiple child elements efficiently. It improves performance and simplifies code by reducing the number of event listeners.",
    "Explain the 'this' keyword in JavaScript and how it behaves in different contexts.": "'This' refers to the current object, and its value depends on the context in which it's used. In the global context, it refers to the global object. In functions, it refers to the calling object.",
    "What is 'asynchronous JavaScript' and how is it different from synchronous JavaScript?": "Asynchronous JavaScript involves non-blocking operations that do not wait for a task to complete before moving on to the next one. Synchronous JavaScript executes tasks in a sequential, blocking manner, where each task must complete before the next one begins.",
    "What is the purpose of 'strict mode' in JavaScript, and how is it enabled?": "'Strict mode' is used to catch common coding mistakes and 'unsafe' actions. It's enabled by adding the statement 'use strict'; at the beginning of a script or a function and enforces a stricter set of rules.",
    "What is 'AJAX' (Asynchronous JavaScript and XML) in web development, and how is it used?": "AJAX is a technique for making asynchronous requests to a server from a web page, allowing data to be loaded or sent without having to refresh the entire page. It's commonly used to create more responsive and interactive web applications.",
    "Explain the 'same-origin policy' in JavaScript and how it affects web security.": "The same-origin policy restricts web pages from making requests to a different domain. It enhances web security by preventing unauthorized access to resources from different origins, protecting against cross-site request forgery (CSRF) attacks.",
    "What are JavaScript closures, and how are they used to encapsulate data and functionality?": "Closures are functions that capture variables from their containing scope, allowing those variables to persist even after the outer function has completed execution. Closures are used to create private variables and encapsulate data and functionality.",
    "What is the purpose of the 'Promise' object in JavaScript and how is it used to handle asynchronous operations?": "A 'Promise' represents a value that may not be available yet but will be in the future. It provides a clean and structured way to handle asynchronous code, simplifying error handling and improving readability.",
    "Explain the concept of 'callback hell' in JavaScript and how it can be mitigated.": "'Callback hell' occurs when deeply nested callbacks make code hard to read and maintain. It can be mitigated by using techniques like named functions, promises, or async/await to flatten the callback structure.",
    "What are the 'event loop' and 'call stack' in JavaScript, and how do they manage asynchronous operations?": "The event loop and call stack are essential components for managing asynchronous operations. The event loop continuously checks the message queue for events, while the call stack manages the execution of synchronous code and function calls.",
    "What is the 'fetch' API in JavaScript, and how is it used to make network requests?": "The 'fetch' API is used to make network requests and retrieve resources from a server. It returns a promise and is widely used for making HTTP requests, handling responses, and dealing with APIs in modern web development.",
    "Explain the 'prototype' and 'prototype chain' in JavaScript, and their role in object-oriented programming.": "The 'prototype' is an object that is linked to all instances of a constructor function. The 'prototype chain' allows objects to inherit properties and methods from their constructor's prototype, enabling a form of inheritance in JavaScript."
}




export { behaviouralQuestions, dbmsQuestions, dataStructures, cnQuestions, osQuestions, hrQuestions, oopsQuestions, pythonQuestions, cppQuestions, javaQuestions, jsQuestions };
